var documenterSearchIndex = {"docs":
[{"location":"api/#Public-API","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"api/#Visualizer","page":"Public API","title":"Visualizer","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"GridVisualizer\nGridVisualizer(; Plotter=default_plotter() , kwargs...)\nSubVisualizer\nreveal\nsave","category":"page"},{"location":"api/#GridVisualize.GridVisualizer","page":"Public API","title":"GridVisualize.GridVisualizer","text":"struct GridVisualizer\n\nGridVisualizer struct\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.GridVisualizer-Tuple{}","page":"Public API","title":"GridVisualize.GridVisualizer","text":"GridVisualizer(; Plotter, kwargs...) -> GridVisualizer\n\n\nCreate a  grid visualizer\n\nPlotter: defaults to default_plotter() and can be PyPlot, Plots, VTKView, Makie or `PlutoVistaÂ´. This pattern allows  to pass the backend as a module to a plot function without heavy default package dependencies.\n\nDepending on the layout keyword argument, a 2D grid of subplots is created. Further ...plot! commands then plot into one of these subplots:\n\nvis=GridVisualizer(Plotter=PyPlot, layout=(2,2)\n...plot!(vis[1,2], ...)\n\nA ...plot  command just implicitly creates a plot context:\n\ngridplot(grid, Plotter=PyPlot) \n\nis equivalent to\n\nvis=GridVisualizer(Plotter=PyPlot, layout=(1,1))\ngridplot!(vis,grid) \nreveal(vis)\n\nPlease note that the return values of all plot commands are specific to the Plotter.\n\nAn interactive mode switch key   for GLMakie (,)  and  VTKView (*) allows to toggle between \"gallery view\" showing all plots at once and \"focused view\" showing only one plot.\n\nKeyword arguments: see available_kwargs\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.SubVisualizer","page":"Public API","title":"GridVisualize.SubVisualizer","text":"A SubVisualizer is just a dictionary which contains plotting information, including the type of the plotter and its position in the plot.\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.reveal","page":"Public API","title":"GridVisualize.reveal","text":"reveal(visualizer::GridVisualizer) -> Any\n\n\nFinish and show plot. Same as setting :reveal=true or :show=true in last plot statement for a context.\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.save","page":"Public API","title":"GridVisualize.save","text":"save(fname::String, visualizer::GridVisualizer) -> Any\n\n\nSave last plotted figure from visualizer to disk.\n\n\n\n\n\nsave(fname::String, scene; Plotter) -> Any\n\n\nSave scene returned from reveal, scalarplot or gridplot  to disk.\n\n\n\n\n\n","category":"function"},{"location":"api/#Plotters","page":"Public API","title":"Plotters","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"default_plotter\ndefault_plotter!\nplottertype\nPyPlotType\nMakieType\nPlotsType\nPlutoVistaType\nVTKViewType\nMeshCatType","category":"page"},{"location":"api/#GridVisualize.default_plotter","page":"Public API","title":"GridVisualize.default_plotter","text":"default_plotter()\n\nReturn default plotter backend. By default, this is set to one of PlutoVista,GLMakie,PyPlot and Plots if one of these packages is imported.\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.default_plotter!","page":"Public API","title":"GridVisualize.default_plotter!","text":"default_plotter!(Module)\n\nSet plotter module or nothing as the default plotter backend.\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.plottertype","page":"Public API","title":"GridVisualize.plottertype","text":"plottertype(Plotter)\n\n\nHeuristically detect type of plotter, returns the corresponding abstract type for plotting.\n\n\n\n\n\nplottertype(p)\n\n\nReturn the type of a plotter.\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.PyPlotType","page":"Public API","title":"GridVisualize.PyPlotType","text":"abstract type PyPlotType <: GridVisualize.AbstractPlotterType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.MakieType","page":"Public API","title":"GridVisualize.MakieType","text":"abstract type MakieType <: GridVisualize.AbstractPlotterType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.PlotsType","page":"Public API","title":"GridVisualize.PlotsType","text":"abstract type PlotsType <: GridVisualize.AbstractPlotterType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.PlutoVistaType","page":"Public API","title":"GridVisualize.PlutoVistaType","text":"abstract type PlutoVistaType <: GridVisualize.AbstractPlotterType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.VTKViewType","page":"Public API","title":"GridVisualize.VTKViewType","text":"abstract type VTKViewType <: GridVisualize.AbstractPlotterType\n\nAbstract type for dispatching on plotter. Experimental.\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.MeshCatType","page":"Public API","title":"GridVisualize.MeshCatType","text":"abstract type MeshCatType <: GridVisualize.AbstractPlotterType\n\nAbstract type for dispatching on plotter. Experimental.\n\n\n\n\n\n","category":"type"},{"location":"api/#Plotting-grids","page":"Public API","title":"Plotting grids","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"gridplot\ngridplot!","category":"page"},{"location":"api/#GridVisualize.gridplot","page":"Public API","title":"GridVisualize.gridplot","text":"gridplot(grid::ExtendableGrid; Plotter, kwargs...) -> Any\n\n\nCreate grid visualizer and plot grid\n\nKeyword arguments: see available_kwargs\n\n\n\n\n\ngridplot(X::AbstractVector; kwargs...) -> Any\n\n\n\n\n\n\ngridplot(\n    X::AbstractVector,\n    Y::AbstractVector;\n    kwargs...\n) -> Any\n\n\n\n\n\n\ngridplot(\n    X::AbstractVector,\n    Y::AbstractVector,\n    Z::AbstractVector;\n    kwargs...\n) -> Any\n\n\n\n\n\n\ngridplot(\n    coord::AbstractMatrix,\n    cellnodes::AbstractMatrix;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.gridplot!","page":"Public API","title":"GridVisualize.gridplot!","text":"gridplot!(\n    ctx::Union{Nothing, Dict{Symbol, Any}},\n    grid::ExtendableGrid;\n    kwargs...\n)\n\n\nPlot grid into subplot in the visualizer. If [i,j] is omitted, [1,1] is assumed.\n\nKeyword arguments: see available_kwargs\n\n\n\n\n\ngridplot!(\n    p::GridVisualizer,\n    grid::ExtendableGrid;\n    kwargs...\n) -> Any\n\n\n\n\n\n\ngridplot!(\n    vis::Union{Nothing, Dict{Symbol, Any}, GridVisualizer},\n    X::AbstractVector;\n    kwargs...\n) -> Any\n\n\n\n\n\n\ngridplot!(\n    vis::Union{Nothing, Dict{Symbol, Any}, GridVisualizer},\n    X::AbstractVector,\n    Y::AbstractVector;\n    kwargs...\n) -> Any\n\n\n\n\n\n\ngridplot!(\n    vis::Union{Nothing, Dict{Symbol, Any}, GridVisualizer},\n    X::AbstractVector,\n    Y::AbstractVector,\n    Z::AbstractVector;\n    kwargs...\n) -> Any\n\n\n\n\n\n\ngridplot!(\n    vis::Union{Nothing, Dict{Symbol, Any}, GridVisualizer},\n    coord::AbstractMatrix,\n    cellnodes::AbstractMatrix,\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Plotting-scalar-data","page":"Public API","title":"Plotting scalar data","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"scalarplot\nscalarplot!","category":"page"},{"location":"api/#GridVisualize.scalarplot","page":"Public API","title":"GridVisualize.scalarplot","text":"scalarplot(\n    grid::ExtendableGrid,\n    func;\n    Plotter,\n    kwargs...\n) -> Any\n\n\nPlot node vector on grid as P1 FEM function on the triangulation.\n\nIf instead of the node vector,  a function is given, it will be evaluated on the grid.\n\nIf instead of the grid,  vectors for coordinates are given, a grid is created automatically.\n\nFor keyword arguments, see available_kwargs\n\n\n\n\n\nscalarplot(func::AbstractVector; kwargs...) -> Any\n\n\n\n\n\n\nscalarplot(\n    X::AbstractArray{T<:Number, 1},\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot(\n    X::AbstractVector,\n    Y::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot(\n    X::AbstractVector,\n    Y::AbstractVector,\n    Z::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot(\n    coord::AbstractMatrix,\n    cellnodes::AbstractMatrix,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.scalarplot!","page":"Public API","title":"GridVisualize.scalarplot!","text":"scalarplot!(\n    ctx::Union{Nothing, Dict{Symbol, Any}},\n    grid::ExtendableGrid,\n    func;\n    kwargs...\n)\n\n\nPlot node vector on grid as P1 FEM function on the triangulation into subplot in the visualizer. If [i,j] is omitted, [1,1] is assumed.\n\nIf instead of the node vector,  a function is given, it will be evaluated on the grid.\n\nIf instead of the grid, coordinate vectors are given, a temporary grid is created.\n\nKeyword arguments: see available_kwargs\n\n\n\n\n\nscalarplot!(\n    ctx::Union{Nothing, Dict{Symbol, Any}},\n    grids::Array{ExtendableGrid{Tv, Ti}, 1},\n    parentgrid::ExtendableGrid{Tv, Ti},\n    funcs::AbstractVector;\n    kwargs...\n) -> Any\n\n\nPlot node vectors on subgrids of parent grid as P1 FEM function on the triangulation into subplot in the visualizer. If [i,j] is omitted, [1,1] is assumed. eyword arguments: see available_kwargs\n\n\n\n\n\nscalarplot!(\n    p::GridVisualizer,\n    grid::ExtendableGrid,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot!(\n    ctx::Union{Nothing, Dict{Symbol, Any}},\n    grid::ExtendableGrid,\n    func::Function;\n    kwargs...\n)\n\n\n\n\n\n\nscalarplot!(\n    p::GridVisualizer,\n    grids::Array{ExtendableGrid{Tv, Ti}, 1},\n    parentgrid::ExtendableGrid{Tv, Ti},\n    funcs::AbstractVector;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot!(\n    ctx::Union{Nothing, Dict{Symbol, Any}},\n    func::AbstractVector;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot!(\n    ctx::Union{Nothing, Dict{Symbol, Any}},\n    X::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot!(\n    ctx::Union{Nothing, Dict{Symbol, Any}},\n    coord::AbstractMatrix,\n    cellnodes::AbstractMatrix,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot!(\n    ctx::GridVisualizer,\n    X::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot!(\n    ctx::GridVisualizer,\n    X::AbstractVector,\n    Y::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot!(\n    ctx::GridVisualizer,\n    X::AbstractVector,\n    Y::AbstractVector,\n    Z::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nscalarplot!(\n    ctx::GridVisualizer,\n    coord::AbstractMatrix,\n    cellnodes::AbstractMatrix,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Plotting-vector-data","page":"Public API","title":"Plotting vector data","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"vectorplot\nvectorplot!\nstreamplot\nstreamplot!","category":"page"},{"location":"api/#GridVisualize.vectorplot","page":"Public API","title":"GridVisualize.vectorplot","text":"vectorplot(\n    grid::ExtendableGrid,\n    func;\n    Plotter,\n    kwargs...\n) -> Any\n\n\nPlot piecewise linear vector field  as quiver plot.\n\n\n\n\n\nvectorplot(\n    X::AbstractVector,\n    Y::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nvectorplot(\n    X::AbstractVector,\n    Y::AbstractVector,\n    Z::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nvectorplot(\n    coord::AbstractMatrix,\n    cellnodes::AbstractMatrix,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.vectorplot!","page":"Public API","title":"GridVisualize.vectorplot!","text":"vectorplot!(\n    ctx::Union{Nothing, Dict{Symbol, Any}},\n    grid::ExtendableGrid,\n    func;\n    kwargs...\n)\n\n\nPlot piecewise linear vector field  as quiver plot.\n\n\n\n\n\nvectorplot!(\n    p::GridVisualizer,\n    grid::ExtendableGrid,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nvectorplot!(\n    ctx::GridVisualizer,\n    X::AbstractVector,\n    Y::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nvectorplot!(\n    ctx::GridVisualizer,\n    X::AbstractVector,\n    Y::AbstractVector,\n    Z::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nvectorplot!(\n    ctx::GridVisualizer,\n    coord::AbstractMatrix,\n    cellnodes::AbstractMatrix,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.streamplot","page":"Public API","title":"GridVisualize.streamplot","text":"streamplot(\n    grid::ExtendableGrid,\n    func;\n    Plotter,\n    kwargs...\n) -> Any\n\n\nPlot piecewise linear vector field  as stream plot. (2D pyplot only)\n\n\n\n\n\nstreamplot(\n    X::AbstractVector,\n    Y::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nstreamplot(\n    X::AbstractVector,\n    Y::AbstractVector,\n    Z::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nstreamplot(\n    coord::AbstractMatrix,\n    cellnodes::AbstractMatrix,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.streamplot!","page":"Public API","title":"GridVisualize.streamplot!","text":"streamplot!(\n    ctx::Union{Nothing, Dict{Symbol, Any}},\n    grid::ExtendableGrid,\n    func;\n    kwargs...\n)\n\n\nPlot piecewise linear vector field  as stream plot. (2D pyplot only)\n\n\n\n\n\nstreamplot!(\n    p::GridVisualizer,\n    grid::ExtendableGrid,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nstreamplot!(\n    ctx::GridVisualizer,\n    X::AbstractVector,\n    Y::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nstreamplot!(\n    ctx::GridVisualizer,\n    X::AbstractVector,\n    Y::AbstractVector,\n    Z::AbstractVector,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nstreamplot!(\n    ctx::GridVisualizer,\n    coord::AbstractMatrix,\n    cellnodes::AbstractMatrix,\n    func;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Custom-plots","page":"Public API","title":"Custom plots","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"customplot\ncustomplot!","category":"page"},{"location":"api/#GridVisualize.customplot","page":"Public API","title":"GridVisualize.customplot","text":"customplot(func; Plotter, kwargs...) -> Any\n\n\nCustom user plot.\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.customplot!","page":"Public API","title":"GridVisualize.customplot!","text":"customplot!(\n    ctx::Union{Nothing, Dict{Symbol, Any}},\n    func;\n    kwargs...\n)\n\n\n\n\n\n\ncustomplot!(\n    func,\n    ctx::Union{Nothing, Dict{Symbol, Any}};\n    kwargs...\n)\n\n\nVariant for do block syntax.\n\n\n\n\n\ncustomplot!(p::GridVisualizer, func; kwargs...)\n\n\n\n\n\n\ncustomplot!(func, p::GridVisualizer; kwargs...)\n\n\nVariant for do block syntax.\n\n\n\n\n\n","category":"function"},{"location":"api/#Keyword-Arguments","page":"Public API","title":"Keyword Arguments","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"available_kwargs","category":"page"},{"location":"api/#GridVisualize.available_kwargs","page":"Public API","title":"GridVisualize.available_kwargs","text":"available_kwargs()\n\n\nAvailable kwargs for all methods of this package.\n\nshow: Show plot immediately. Default: false\nreveal: Show plot immediately (same as :show). Default: false\nclear: Clear plot before adding new content. Default: true\nlayout: Layout of plots in window. Default: (1, 1)\nsize: Plot window resolution. Default: (500, 500)\nlegend: Legend (position): one of [:none, :best, :lt, :ct, :rt, :lc, :rc, :lb, :cb, :rb]. Default: none\ntitle: Plot title. Default: ``\nxlabel: x axis label. Default: x\nylabel: y axis label. Default: y\nzlabel: z axis label. Default: z\nxlimits: x axis limits. Default: (1, -1)\nylimits: y axis limits. Default: (1, -1)\nzlimits: z axis limits. Default: (1, -1)\nlimits: function limits. Default: (1, -1)\nxscale: x axis  scale: one of [:log, :identity]. Default: identity\nyscale: y axis  scale: one of [:log, :identity]. Default: identity\naspect: XY Aspect ratio modification. Default: 1.0\nfontsize: Fontsize of titles. All others are relative to it. Default: 20\nlinewidth: linewidth for isolines or 1D plots. Default: 2\nlinestyle: 1D Plot linestyle: one of [:solid, :dash, :dot, :dashdot, :dashdotdot]. Default: solid\nmarkevery: 1D plot marker stride. Default: 5\nmarkersize: 1D plot marker size. Default: 5\nmarkershape: 1D plot marker shape: one of [:none, :circle, :star5, :diamond, :hexagon, :cross, :xcross, :utriangle, :dtriangle, :rtriangle, :ltriangle, :pentagon, :+, :x]. Default: none\ncolor: 1D plot line color. Default: RGB{Float64}(0.0,0.0,0.0)\ncellwise: 1D plots cellwise; unmaintained and can be slow). Default: false\nlabel: 1D plot label. Default: ``\nlevels: array of isolevels or number of isolevels for contour plots. Default: 7\nelevation: 2D plot height factor for elevation. Default: 0.0\ncolorlevels: 2D/3D contour plot: number of color levels. Default: 51\ncolormap: 2D/3D contour plot color map (any from ColorSchemes.jl). Default: viridis\ncolorbar: 2D/3D plot colorbar. One of [:none, :vertical, :horizontal]. Default: vertical\ncolorbarticks: number of ticks in colorbar (:default sets it equal to levels). Default: default\noutlinealpha: 3D outline surface alpha value. Default: 0.05\nlevelalpha: 3D isolevel alpha. Default: 0.25\nplanealpha: 3D plane section alpha. Default: 0.25\ntetxplane_tol: tolerance for tet-plane intersection in 3D. Default: 0.0\nrasterpoints: Number of quiver points resp. half number of streamplot interpolation points in the maximum extent direction. . Default: 16\noffset: Offset of quiver grid. Default: default\nvscale: Vector field scale for quiver grid. Default: 1.0\nvconstant: Set all arrow length constant in vector plot. Default: false\nvnormalize: Normalize vector field before scaling. Default: true\ninterior: 3D plot interior of grid. Default: true\nxplanes: 3D x plane positions or number thereof. Default: [1.7976931348623157e308]\nyplanes: 3D y plane positions or number thereof. Default: [1.7976931348623157e308]\nzplanes: 3D z plane positions or number thereof. Default: [1.7976931348623157e308]\nzoom: Zoom level. Default: 1.0\ngridscale: Grid scale factor. Will be applied also to planes, spacing. Default: 1\ncellcoloring: Coloring of cells: one of [:cellregions, :pcolors, :partitions]. Default: cellregions\nazim: 3D azimuth angle  (in degrees). Default: -60\nelev: 3D elevation angle  (in degrees). Default: 30\nperspectiveness: 3D perspective A number between 0 and 1, where 0 is orthographic, and 1 full perspective. Default: 0.25\nscene3d: 3D plot type of Makie scene. Alternaitve to :Axis3 is :LScene. Default: Axis3\nfignumber: Figure number (PyPlot). Default: 1\nframepos: Subplot position in frame (VTKView). Default: 1\nsubplot: Private: Actual subplot. Default: (1, 1)\nbackend: Backend for PlutoVista plot. Default: default\ndim: Data dimension for PlutoVista plot. Default: 1\nregions: List of regions to plot. Default: all\nspecies: Number of species to plot or number of species in regions. Default: 1\nspacing: Removed from API. Default: nothing\nshow_colorbar: Show color bar next to grid plots. Default: true\nslice: Plot a dim-1 slice along a hyperplane expression :(Î±x Â± Î²y [Â± Î³z] Â± Î´)) or a fixed axis pair, e.g., :x => 3. Default: nothing\n\n\n\n\n\n","category":"function"},{"location":"api/#Supporting-methods","page":"Public API","title":"Supporting methods","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"vectorsample\nquiverdata","category":"page"},{"location":"api/#GridVisualize.vectorsample","page":"Public API","title":"GridVisualize.vectorsample","text":"      vectorsample(grid::ExtendableGrid{Tv, Ti}, v;\n                  offset = :default,\n                  rasterpoints = 15,\n                  reltol = 1.0e-10,\n                  gridscale = 1.0,\n                  xlimits = (1, -1),\n                  ylimits = (1, -1),\n                  zlimits = (1, -1)) where {Tv, Ti}\n\nExtract values of given vector field (either nodal values of a piecewise linear vector field or a callback function providing evaluation of the vector field for given generalized barycentric coordinates). at all sampling points on  offset+ i*spacing for i in Z^d  defined by the tuples offset and spacing. Returned values can be fed into quiverdata\n\nBy default, offset is at the minimum of grid coordinates, and spacing is defined the largest grid extend divided by 10.\n\nThe intermediate rasterflux in future versions can be used to calculate streamlines.\n\nThe code is 3D ready.\n\n\n\n\n\n","category":"function"},{"location":"api/#GridVisualize.quiverdata","page":"Public API","title":"GridVisualize.quiverdata","text":" function quiverdata(rastercoord,\n                     rasterflux;\n                     vscale = 1.0,\n                     vnormalize = true,\n                     vconstant = false)\n\nExtract  nonzero fluxes for quiver plots from rastergrid obtained by vectorsample.\n\nReturns qc, qv -  d x nquiver matrices.\n\nIf vnormalize is true, the vector field is normalized to vscale*min(spacing), otherwise, it is scaled by vscale Result data are meant to  be ready for being passed to calls to quiver with various plotting backends.\n\n\n\n\n\n","category":"function"},{"location":"api/#Creating-movies","page":"Public API","title":"Creating movies","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"movie","category":"page"},{"location":"api/#GridVisualize.movie","page":"Public API","title":"GridVisualize.movie","text":"movie( func, vis::GridVisualizer, ::Type{MakieType}; file = nothing, format = \"gif\", kwargs... )\n\nRecord a movie with GLMakie backend. MP4 files and gifs can be created.\n\n\n\n\n\nmovie( func, vis::GridVisualizer, ::Type{PlotsType}; file = nothing, format = \"gif\", kwargs... )\n\nRecord a movie with Plots backend. MP4 files and gifs can be created.\n\n\n\n\n\n","category":"function"},{"location":"privapi/#Private-API","page":"Private API","title":"Private API","text":"","category":"section"},{"location":"privapi/#Common-methods","page":"Private API","title":"Common methods","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"Modules = [GridVisualize]\nPrivate = true\nPublic = false\nPages = [\"dispatch.jl\",\"common.jl\",\"slice_plots.jl\"]","category":"page"},{"location":"privapi/#GridVisualize.AbstractPlotterType","page":"Private API","title":"GridVisualize.AbstractPlotterType","text":"abstract type AbstractPlotterType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"privapi/#Base.getindex-Tuple{GridVisualizer, Any, Any}","page":"Private API","title":"Base.getindex","text":"getindex(p, i, j)\n\n\nReturn a SubVisualizer\n\n\n\n\n\n","category":"method"},{"location":"privapi/#Base.size-Tuple{GridVisualizer}","page":"Private API","title":"Base.size","text":"size(p)\n\n\nReturn the layout of a GridVisualizer\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.ismeshcat-Tuple{Any}","page":"Private API","title":"GridVisualize.ismeshcat","text":"ismeshcat(Plotter)\n\n\nHeuristically check if Plotter is MeshCat\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualizeTools.extract_visible_bfaces3D-Tuple{ExtendableGrid, Any}","page":"Private API","title":"GridVisualizeTools.extract_visible_bfaces3D","text":"extract_visible_bfaces3D(\n    grid,\n    xyzcut;\n    gridscale,\n    primepoints,\n    Tp,\n    Tf\n)\n\n\nExtract visible boundary faces - those not cut off by the planes x=xyzcut[1] or y=xyzcut[2]  or z=xyzcut[3]. \n\nReturn corresponding points and facets for each region for drawing as mesh (Makie,MeshCat) or trisurf (pyplot)\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualizeTools.extract_visible_cells3D-Tuple{ExtendableGrid, Any}","page":"Private API","title":"GridVisualizeTools.extract_visible_cells3D","text":"extract_visible_cells3D(\n    grid,\n    xyzcut;\n    cellcoloring,\n    gridscale,\n    primepoints,\n    Tp,\n    Tf\n)\n\n\nExtract visible tetrahedra - those intersecting with the planes x=xyzcut[1] or y=xyzcut[2]  or z=xyzcut[3]. \n\nReturn corresponding points and facets for each region for drawing as mesh (Makie,MeshCat) or trisurf (pyplot)\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualizeTools.marching_tetrahedra-Tuple{ExtendableGrid, Any, Any, Any}","page":"Private API","title":"GridVisualizeTools.marching_tetrahedra","text":"marching_tetrahedra(\n    grid,\n    func,\n    planes,\n    flevels;\n    gridscale,\n    kwargs...\n)\n\n\nExtract isosurfaces and plane interpolation for function on 3D tetrahedral mesh. See marching_tetrahedra(coord,cellnodes,func,planes,flevels;tol, primepoints, primevalues, Tv, Tp, Tf)\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualizeTools.marching_triangles-Tuple{ExtendableGrid, Any, Any, Any}","page":"Private API","title":"GridVisualizeTools.marching_triangles","text":"marching_triangles(grid, func, lines, levels; gridscale)\n\n\nCollect isoline snippets and/or intersection points with lines and values ready for linesegments!\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualizeTools.marching_triangles-Tuple{ExtendableGrid, Any, Any}","page":"Private API","title":"GridVisualizeTools.marching_triangles","text":"marching_triangles(grid, func, levels; gridscale)\n\n\nDeprecated\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.compute_2d_rotation_matrix-Tuple{Any}","page":"Private API","title":"GridVisualize.compute_2d_rotation_matrix","text":"compute_2d_rotation_matrix(target_vector)\n\n\nCompute and return a rotation matrix ðÂ²Ë£Â²\nwhich rotates the second unit vector y = [0, 1]áµ\nin the direction of a given target_vector t â ðÂ²\n\ntarget_vector: vector with 2 components (not necessarily of unit length)\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.compute_3d_z_rotation_matrix-Tuple{Any}","page":"Private API","title":"GridVisualize.compute_3d_z_rotation_matrix","text":"compute_3d_z_rotation_matrix(target_vector)\n\n\nCompute and return a rotation matrix ðÂ³Ë£Â³\nwhich rotates the third unit vector z = [0, 0, 1]áµ\nin the direction of a given target_vector t â ðÂ³\n\ntarget_vector: vector with 3 components (not necessarily of unit length)\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.eval_slice_expr!-Tuple{Any, Pair{Symbol, <:Number}}","page":"Private API","title":"GridVisualize.eval_slice_expr!","text":"eval_slice_expr!(vec, pair)\n\n\nProvide a Symbol-Number pair as a slice expression.\nAllowed symbols are :x, :y and :z.\n\nExample:\n  -  :x = 4 becomes :(x - 4)\n  -  :y = -3 becomes :(y + 3)\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.eval_slice_expr!-Tuple{Any, Union{Expr, Symbol}}","page":"Private API","title":"GridVisualize.eval_slice_expr!","text":"eval_slice_expr!(vec, expr)\n\n\nEvaluate an expression of the form :(Î±x Â± Î²y Â± Î³z Â± Î´)\nand compute the vector vec = [ Î±, Î², Î³, Î´ ].\n\nAt least one nonzero symbol :x, :y or :z needs to be present.\nProviding a :z symbol assumes that length(vec) == 4.\n\nExamples:\n  -  :(x-3) => [ 1, 0, 0, -3 ]\n  -  :(2x - z + 3)  => [2, 0, 1, 3]\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.slice_plot!-Tuple{Any, Type{Val{2}}, Any, Any}","page":"Private API","title":"GridVisualize.slice_plot!","text":"slice_plot!(ctx, _, grid, values)\n\n\nExtract a 1D line plot from a 2D plot\n\nThe intersection of the given 2D grid with a given line is computed and rotated onto the\nfirst coordinate axis.\n\nFor a simple line (x = const / y = const) the original coordinates of the other axis are\npreserved.\n\nElse, for a generic line, the new axis has non-negative values and starts at [0,0].\n\nctx:     plotting context\ngrid:    2D ExtendableGrid\nvalues:  value vector corresponding to the grid nodes\nline:    Vector [a,b,c], s.t., ax + by + d = 0 defines the line that slices the 2D grid\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.slice_plot!-Tuple{Any, Type{Val{3}}, Any, Any}","page":"Private API","title":"GridVisualize.slice_plot!","text":"slice_plot!(ctx, _, grid, values)\n\n\nExtract a 2D plane plot of a 3D plot\n\nThe intersection of the given 3D grid with a given plane is computed and rotated into a 2D\ncoordinate system.\n\nFor a simple plane (x = const / y = const / z = const) the original coordinates of the free\naxes are preserved. The plotted axes order is in this case\n    x = const: ( y, z )\n    y = const: ( x, z )\n    z = const: ( x, y )\n\nElse, for a generic plane, the new coordinate system has non-negative values and start at [0,0].\n\nctx:     Plotting context\ngrid:    3D ExtendableGrid\nvalues:  value vector corresponding to the grid nodes\nplane:   Vector [a,b,c,d], s.t., ax + by + cz + d = 0 defines the plane that slices the 3D grid\n\n\n\n\n\n","category":"method"},{"location":"privapi/","page":"Private API","title":"Private API","text":"ispyplot\nisplutovista\nisplots\nismakie\nisvtkview","category":"page"},{"location":"privapi/#GridVisualize.ispyplot","page":"Private API","title":"GridVisualize.ispyplot","text":"ispyplot(Plotter)\n\n\nHeuristically check if Plotter is PyPlot\n\n\n\n\n\n","category":"function"},{"location":"privapi/#GridVisualize.isplutovista","page":"Private API","title":"GridVisualize.isplutovista","text":"isplutovista(Plotter)\n\n\nHeuristically check if Plotter is PlutoVista\n\n\n\n\n\n","category":"function"},{"location":"privapi/#GridVisualize.isplots","page":"Private API","title":"GridVisualize.isplots","text":"isplots(Plotter)\n\n\nHeuristically check if  Plotter is Plots\n\n\n\n\n\n","category":"function"},{"location":"privapi/#GridVisualize.ismakie","page":"Private API","title":"GridVisualize.ismakie","text":"ismakie(Plotter)\n\n\nHeuristically check if Plotter is Makie/WGLMakie\n\n\n\n\n\n","category":"function"},{"location":"privapi/#GridVisualize.isvtkview","page":"Private API","title":"GridVisualize.isvtkview","text":"isvtkview(Plotter)\n\n\nHeuristically check if Plotter is VTKView\n\n\n\n\n\n","category":"function"},{"location":"privapi/#PyPlot","page":"Private API","title":"PyPlot","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"Modules = [GridVisualize]\nPrivate = true\nPublic = false\nPages = [\"pyplot.jl\"]","category":"page"},{"location":"privapi/#GridVisualize.tridata-Tuple{ExtendableGrid, Any}","page":"Private API","title":"GridVisualize.tridata","text":"tridata(grid, gridscale)\n\n\nReturn tridata to be splatted to PyPlot calls\n\n\n\n\n\n","category":"method"},{"location":"privapi/#Makie","page":"Private API","title":"Makie","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"Modules = [GridVisualize,FlippableLayout]\nPrivate = true\nPublic = false\nPages = [\"makie.jl\", \"flippablelayout.jl\"]","category":"page"},{"location":"privapi/#GridVisualize.makeaxis3d-Tuple{Any}","page":"Private API","title":"GridVisualize.makeaxis3d","text":"makeaxis3d(ctx)\n\nDispatch between LScene and new Axis3. Axis3 does not allow zoom, so we support LScene in addition.\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.makescene2d-Tuple{Any, Any}","page":"Private API","title":"GridVisualize.makescene2d","text":"makescene2d(ctx)\n\nComplete scene with title and status line showing interaction state. This uses a gridlayout and its  protrusion capabilities.\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.makescene3d-Tuple{Any}","page":"Private API","title":"GridVisualize.makescene3d","text":"   makescene3d(ctx)\n\nComplete scene with title and status line showing interaction state. This uses a gridlayout and its  protrusion capabilities.\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.scene_interaction","page":"Private API","title":"GridVisualize.scene_interaction","text":" scene_interaction(update_scene,view,switchkeys::Vector{Symbol}=[:nothing])\n\nControl multiple scene elements via keyboard up/down keys.  Each switchkey is assumed to correspond to one of these elements. Pressing a switch key transfers control to its associated element.\n\nControl of values of the current associated element is performed by triggering change values via up/down (Â± 1)  resp. pageup/pagedown (Â±10) keys\n\nThe update_scene callback gets passed the change value and the symbol.\n\n\n\n\n\n","category":"function"},{"location":"privapi/#GridVisualize.FlippableLayout.FLayout","page":"Private API","title":"GridVisualize.FlippableLayout.FLayout","text":"mutable struct FLayout\n\nStruct describing flippable layout data. We don't type annotate with Makie types as they are unknown at start time.\n\nvisible: Visible GridLayout\n\noffscreen: Hidden GridLayot\n\nblocked: Has the layout been blocked by the block key ?\n\nlayoutables: Layoutables attached to layout\n\ncondition: Condition variable working together with the blocked field.\n\n\n\n\n\n","category":"type"},{"location":"privapi/#GridVisualize.FlippableLayout.flayoutscene-Tuple{}","page":"Private API","title":"GridVisualize.FlippableLayout.flayoutscene","text":"flayoutscene(;blocked=false, kwargs...)\n\nLayoutscene with interactive layout and blocking functionality.\n\nThe , key switches between focused view showing only one subscene and \"gallery view\" showing all layoutables at once.\n\nThe space key toggles blocking of the execution of the main therad when yield is replaced by yieldwait. Initial blocking state is  set by the blocked kwarg.\n\nThe kwargs... are the same as of AbstractPlotting.layoutscene.\n\nThe idea is that this can work in some cases as a drop-in replacement of layoutscene.     \n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.FlippableLayout.setmakie!-Tuple{Any}","page":"Private API","title":"GridVisualize.FlippableLayout.setmakie!","text":"setmakie!(MyMakie)\n\nSet the Makie module. This Makie can be GLMakie,WGLMakie,CairoMakie\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.FlippableLayout.yieldwait-Tuple{GridVisualize.FlippableLayout.FLayout}","page":"Private API","title":"GridVisualize.FlippableLayout.yieldwait","text":" yieldwait(fliplayoutscene)\n\nYield and wait in case of scene being blocked via space key toggle\n\n\n\n\n\n","category":"method"},{"location":"privapi/","page":"Private API","title":"Private API","text":"FlippableLayout","category":"page"},{"location":"privapi/#GridVisualize.FlippableLayout","page":"Private API","title":"GridVisualize.FlippableLayout","text":"This module is a submodule of GridVisualize.\n\nIt manages a layoutscene with interactive layout and blocking functionality.\n\nThanks to Julius Krumbiegel for providing  a basic implementation of focus switching.\n\nGridVisualize avoids creating dependencies on plotting backends. So we provide a way to emulate \"import Makie\" by allowing to set it as a global variable in the setmakie!.  As a consequence, we can't use Makie types at compile time.\n\n\n\n\n\n","category":"module"},{"location":"privapi/#Plots","page":"Private API","title":"Plots","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"Modules = [GridVisualize]\nPrivate = true\nPublic = false\nPages = [joinpath(\"src\",\"plots.jl\")] # https://github.com/JuliaDocs/Documenter.jl/issues/2639","category":"page"},{"location":"privapi/#GridVisualize.rectdata-Tuple{Any, Any, Any}","page":"Private API","title":"GridVisualize.rectdata","text":"rectdata(grid, gridscale, U)\n\n\nReturn rectangular grid data + function to be splatted into Plots calls\n\n\n\n\n\n","category":"method"},{"location":"privapi/#VTKView","page":"Private API","title":"VTKView","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"Modules = [GridVisualize]\nPrivate = true\nPublic = false\nPages = [\"vtkview.jl\"]","category":"page"},{"location":"privapi/#Internals","page":"Private API","title":"Internals","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"GridVisualize.ImplEvalSlice","category":"page"},{"location":"privapi/#GridVisualize.ImplEvalSlice","page":"Private API","title":"GridVisualize.ImplEvalSlice","text":"Implementation details for slice evaluation. Do not use directly.\n\n\n\n\n\n","category":"module"},{"location":"contributing/#Hints-for-contributors","page":"Contributing","title":"Hints for contributors","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Non-experimental backends are: Makie, PyPlot, PlutoVista, partially Plots. These should be checked before submitting a pull request.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"As it is not easy to install a decent CI for graphical interfaces, visual checking can be performed in the following way. Create an environment which contains ExtendableGrids, GLMakie, PyPlot, PlutoVista, Plots and PlutoUI, and develops GridVisualize. A good option is to create a \"shared environment\" @GridVisualize (assuming GridVisualize is worked on in JULIA_PKG_DEVDIR):","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"$ julia --project=@GridVisualize\n$ julia> ] # Enter Pkg mode\n$ (@GridVisualize) pkg> add GLMakie, PyPlot, PlutoVista, Plots, PlutoUI, ExtendableGrids\n$ (@GridVisualize) pkg> dev GridVisualize\n$ julia> using GridVisualize GLMakie, PyPlot,  Plots\n$ julia> include(\"examples/plotting.jl\")\n$ julia> plotting_multiscene(Plotter=PyPlot)\n$ julia> plotting_multiscene(Plotter=Plots)\n$ julia> plotting_multiscene(Plotter=GLMakie)","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For checking the PlutoVista backend, perform in the same environment ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> using Pluto\njulia> ENV[\"PLUTO_PROJECT\"]=Base.active_project()\njulia> Pluto.run(notebook=\"examples/plutovista.jl\")\n","category":"page"},{"location":"pluto_examples/plutovista/#plutovista","page":"plutovista","title":"plutovista.jl","text":"","category":"section"},{"location":"pluto_examples/plutovista/","page":"plutovista","title":"plutovista","text":"Download this Pluto.jl  notebook.","category":"page"},{"location":"pluto_examples/plutovista/","page":"plutovista","title":"plutovista","text":"<iframe style=\"height:2000px\" width=\"100%\" src=\"../plutovista.html\"> </iframe>","category":"page"},{"location":"script_examples/plotting/#Plotting-examples","page":"plotting","title":"Plotting examples","text":"","category":"section"},{"location":"script_examples/plotting/#Plotters","page":"plotting","title":"Plotters","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"All plot functions in GridVisualize.jl have a Plotter keyword argument  which defaults to nothing.  This allows to pass a module as plotting backend  without creating a dependency. Fully supported are PyPlot, GLMakie and PlutoVista.  WGLMakie and CairoMakie work in principle but in the moment don't deliver  all necessary functionality. For Plots we miss the possibility to work with triangle meshes (this is under development, though)","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"Also supported is VTKView  which is experimental and works only on linux.","category":"page"},{"location":"script_examples/plotting/#Grid-plots","page":"plotting","title":"Grid plots","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"Here, we define some sample grids for plotting purposes.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"using ExtendableGrids\nusing GridVisualize","category":"page"},{"location":"script_examples/plotting/#1D-grids","page":"plotting","title":"1D grids","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function grid1d(; n = 50)\n    X = collect(0:(1 / n):1)\n    return g = simplexgrid(X)\nend\n\nfunction plotting_grid1d(; Plotter = default_plotter(), kwargs...)\n    return gridplot(grid1d(); Plotter = Plotter, resolution = (500, 200), kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#2D-grids","page":"plotting","title":"2D grids","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function grid2d(; n = 20)\n    X = collect(0:(1 / n):1)\n    return g = simplexgrid(X, X)\nend\n\nfunction plotting_grid2d(; Plotter = default_plotter(), kwargs...)\n    return gridplot(grid2d(); Plotter = Plotter, kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#3D-grids","page":"plotting","title":"3D grids","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"The kwargs xplane, yplane and zplane which allow to control cutplanes which peel off some elements from the grid in 3d and allow to explore the inner triangulation.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"For Makie and VTKView, the cutplane values can be controlled interactively.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function grid3d(; n = 15)\n    X = collect(0:(1 / n):1)\n    return g = simplexgrid(X, X, X)\nend\n\nfunction plotting_grid3d(; Plotter = default_plotter(), kwargs...)\n    return gridplot(grid3d(); Plotter = Plotter, kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#Function-plots","page":"plotting","title":"Function plots","text":"","category":"section"},{"location":"script_examples/plotting/#Function-on-1D-grid","page":"plotting","title":"Function on 1D grid","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function func1d(; n = 50)\n    g = grid1d(; n = n)\n    return g, map(x -> sinpi(2 * x[1]), g)\nend\n\nfunction plotting_func1d(; Plotter = default_plotter(), kwargs...)\n    g, f = func1d()\n    return scalarplot(g, f; Plotter = Plotter, resolution = (500, 300), kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#Function-on-2D-grid","page":"plotting","title":"Function on 2D grid","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function func2d(; n = 30)\n    g = grid2d(; n = n)\n    return g, map((x, y) -> sinpi(2 * x) * sinpi(3.5 * y), g)\nend\n\nfunction plotting_func2d(; Plotter = default_plotter(), kwargs...)\n    g, f = func2d()\n    return scalarplot(g, f; Plotter = Plotter, levels = 10, kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#Function-on-3D-grid","page":"plotting","title":"Function on 3D grid","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"Plotting a function then goes as follows: xplane, yplane and zplane now define cut planes where the function projection is plotted as a heatmap. The additional flevel keyword argument allows to control an isolevel.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"For Makie and VTKView, the cutplane values and the flevel can be controlled interactively.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function func3d(; n = 15)\n    g = grid3d(; n = n)\n    return g, map((x, y, z) -> sinpi(2 * x) * sinpi(3.5 * y) * sinpi(1.5 * z), g)\nend\n\nfunction plotting_func3d(;\n        Plotter = default_plotter(),\n        xplanes = [0.49],\n        yplanes = [0.49],\n        zplanes = [0.49],\n        levels = 5,\n        kwargs...,\n    )\n    g, f = func3d()\n    return scalarplot(g, f; Plotter = Plotter, levels, xplanes, yplanes, zplanes, kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#d-1-dim-slice-in-d-dim-data","page":"plotting","title":"d-1 dim slice in d-dim data","text":"","category":"section"},{"location":"script_examples/plotting/#2D-slice-of-a-3D-grid","page":"plotting","title":"2D slice of a 3D grid","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"You can plot a 2D slice of a function defined on a 3D grid by providing a slice key word argument which describes a plane equation of a fixed value to one axis.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"The example shows a plot for a fixed axis y = 0.5. Note that labeling the other axes may be useful","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function plotting_slice3d(;\n        Plotter = default_plotter(),\n        slice = :y => 0.5,\n        xlabel = \"x\",\n        ylabel = \"z\",\n        kwargs...,\n    )\n    g, f = func3d()\n    return scalarplot(g, f; Plotter, slice, xlabel, ylabel, kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#1D-line-of-a-2D-grid","page":"plotting","title":"1D line of a 2D grid","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"You can plot a 1D line of a function defined on a 2D grid by providing a slice key word argument which describes a line equation of a fixed value to one axis.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"The example shows a plot along the diagonal x + y - 1 = 0 Note that you should provide meaningful axes labels","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function plotting_line2d(;\n        Plotter = default_plotter(),\n        slice = :(x + y - 1),\n        xlabel = \"line\",\n        ylabel = \"value\",\n        kwargs...,\n    )\n    g, f = func2d()\n    return scalarplot(g, f; Plotter, slice, xlabel, ylabel, kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"Plotting a function then goes as follows: xplane, yplane and zplane now define cut planes where the function projection is plotted as a heatmap. The additional flevel keyword argument allows to control an isolevel.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"For Makie and VTKView, the cutplane values and the flevel can be controlled interactively.","category":"page"},{"location":"script_examples/plotting/#Vector-and-stream-plots","page":"plotting","title":"Vector and stream plots","text":"","category":"section"},{"location":"script_examples/plotting/#2D-vector","page":"plotting","title":"2D vector","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function vec2d(; n = 20)\n    g = grid2d(; n = n)\n    return g,\n        vcat(\n            map((x, y) -> sinpi(2 * x) * sinpi(3.5 * y), g)',\n            map((x, y) -> cospi(2 * x) * cospi(3.5 * y), g)'\n        )\nend\n\nfunction plotting_vec2d(; Plotter = default_plotter(), n = 20, kwargs...)\n    g, f = vec2d(; n = n)\n    return vectorplot(g, f; Plotter = Plotter, kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#2D-stream","page":"plotting","title":"2D stream","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"Stream plots are currently only available with PyPlot and Makie","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function plotting_stream2d(; Plotter = default_plotter(), n = 50, kwargs...)\n    g, f = vec2d(; n = n)\n    return GridVisualize.streamplot(g, f; Plotter = Plotter, rasterpoints = 100, kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#Movie","page":"plotting","title":"Movie","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"Movies can contain  any of the previous plots.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function plotting_movie(; filename = \"plotting_video.gif\", Plotter = default_plotter())\n    vis = GridVisualizer(; Plotter = Plotter, size = (600, 200), layout = (1, 2))\n    X = 0:0.2:10\n    grid = simplexgrid(X, X)\n    return movie(vis; file = filename) do vis\n        for t in 0:0.1:10\n            f = map((x, y) -> sin(x - t) * cos(y - t), grid)\n            g = map((x, y) -> sin(t) * sin(x) * cos(y), grid)\n            scalarplot!(\n                vis[1, 1],\n                grid,\n                f;\n                clear = true,\n                title = \"t=$(t)\",\n                limits = (-1, 1),\n                levels = 7,\n                colormap = :hot\n            )\n            scalarplot!(\n                vis[1, 2],\n                grid,\n                g;\n                clear = true,\n                title = \"t=$(t)\",\n                limits = (-1, 1),\n                levels = 7,\n                colormap = :hot\n            )\n            reveal(vis)\n        end\n    end\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#Multiscene-plots","page":"plotting","title":"Multiscene plots","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"We can combine multiple plots into one scene according to some layout grid given by the layout parameter.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"This is not currently supported by the PlutVista backend.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"The ',' key for GLMakie and the '*' key for VTKView allow to switch between gallery view (default) and focused view of only one subscene.","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function plotting_multiscene!(p)\n    gridplot!(p[1, 1], grid1d(); title = \"1D grid\", legend = :rt)\n    scalarplot!(\n        p[2, 1],\n        grid1d(),\n        sin;\n        title = \"1D grid function\",\n        label = \"sin\",\n        markershape = :diamond,\n        color = :red,\n        legend = :rb,\n    )\n    scalarplot!(\n        p[2, 1],\n        grid1d(),\n        cos;\n        title = \"1D grid function\",\n        label = \"cos\",\n        linestyle = :dash,\n        markershape = :none,\n        color = :green,\n        clear = false,\n    )\n    gridplot!(p[1, 2], grid2d(); title = \"2D grid\")\n    scalarplot!(p[2, 2], func2d()...; colormap = :bamako, title = \"2D grid function\")\n    gridplot!(p[1, 3], grid3d(); zplane = 0.49, title = \"3D grid\")\n    scalarplot!(\n        p[2, 3],\n        func3d()...;\n        zplane = 0.49,\n        flevel = 0.5,\n        colormap = :bamako,\n        title = \"3D grid function\",\n    )\n    vectorplot!(p[1, 4], vec2d()...; title = \"2D quiver\")\n    GridVisualize.streamplot!(p[2, 4], vec2d()...; title = \"2D stream\")\n    return reveal(p)\nend\n\nfunction plotting_multiscene(; Plotter = default_plotter(), resolution = (1000, 500))\n    return plotting_multiscene!(\n        GridVisualizer(;\n            Plotter = Plotter,\n            layout = (2, 4),\n            clear = true,\n            resolution = resolution,\n        )\n    )\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#Plots-of-functions-on-subgrids","page":"plotting","title":"Plots of functions on subgrids","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"We can jointly plot functions on different subgrids which e.g. model a particle density jumping at a heterointerface Currently supported for PyPlot and Makie","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"The general scheme is to pass a vector of subgrid, the parent grid and the corresponding vector of functions on the respective subgrids","category":"page"},{"location":"script_examples/plotting/#1D-case","page":"plotting","title":"1D case","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function plotting_jfunc1d(; Plotter = default_plotter(), filename = \"plotting_jfunc1d.gif\")\n    X = 0:1:10\n    g = simplexgrid(X)\n    cellmask!(g, [0], [5], 2)\n    g1 = subgrid(g, [1])\n    g2 = subgrid(g, [2])\n\n    vis = GridVisualizer(; Plotter, color = :red)\n    return movie(vis; file = filename) do vis\n        for t in 0:0.05:1\n            func1 = map((x) -> x - t, g1)\n            func2 = map((x) -> -x + t, g2)\n            func = map(x -> x^2 / 100 - t, g)\n            scalarplot!(\n                vis,\n                [g1, g2],\n                g,\n                [func1, func2];\n                Plotter,\n                elevation = 0.1,\n                clear = true,\n                color = :red,\n            )\n            scalarplot!(\n                vis,\n                g,\n                func;\n                Plotter,\n                elevation = 0.1,\n                clear = false,\n                color = :green,\n            )\n            reveal(vis)\n        end\n    end\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#2D-case","page":"plotting","title":"2D case","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function plotting_jfunc2d(; Plotter = default_plotter(), kwargs...)\n    X = 0:0.7:10\n    g = simplexgrid(X, X)\n    cellmask!(g, [0, 0], [5, 5], 2)\n    g1 = subgrid(g, [1])\n    g2 = subgrid(g, [2])\n\n    func1 = map((x, y) -> x^2 + y, g1)\n    func2 = map((x, y) -> (x + y^2), g2)\n    return scalarplot([g1, g2], g, [func1, func2]; Plotter, kwargs...)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#3D-case","page":"plotting","title":"3D case","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function plotting_jfunc3d(;\n        Plotter = default_plotter(),\n        levels = 0,\n        yplane = 0.25,\n        xplane = 0.25,\n        zplane = 0.25,\n        levelalpha = 1,\n        colormap = :hot,\n        kwargs...,\n    )\n    X = 0:0.1:1\n    g = simplexgrid(X, X, X)\n    cellmask!(g, [0, 0, 0], [0.5, 0.5, 0.5], 2)\n    g1 = subgrid(g, [1])\n    g2 = subgrid(g, [2])\n    func1 = map((x, y, z) -> (x + y + z), g1)\n    func2 = map((x, y, z) -> (3 - x - y - z), g2)\n    return scalarplot(\n        [g1, g2],\n        g,\n        [func1, func2];\n        Plotter,\n        levels,\n        xplane,\n        yplane,\n        zplane,\n        levelalpha,\n        colormap,\n        kwargs...,\n    )\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/#Custom-plots","page":"plotting","title":"Custom plots","text":"","category":"section"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"function plotting_custom(; Plotter = default_plotter(), kwargs...)\n    vis = GridVisualizer(; Plotter = Plotter)\n    grid = grid2d()\n    gridplot!(vis, grid)\n    customplot!(vis) do ax\n        ismakie(Plotter) && Plotter.scatter!(ax, rand(10), rand(10), fill(0.1, 10); color = :blue, markersize = 20)\n        ispyplot(Plotter) && ax.scatter(rand(10), rand(10); s = 500)\n        isplots(Plotter) && Plotter.scatter!(ax, rand(10), rand(10); color = :blue, markersize = 10, label = nothing)\n    end\n    return reveal(vis)\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"(Image: )","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"plotting_functions_svg = [\n    :plotting_multiscene,\n    :plotting_func1d,\n    :plotting_func2d,\n    :plotting_func3d,\n    :plotting_slice3d,\n    :plotting_line2d,\n    :plotting_jfunc2d,\n    :plotting_jfunc3d,\n    :plotting_vec2d,\n    :plotting_stream2d,\n    :plotting_grid1d,\n    :plotting_grid2d,\n    :plotting_grid3d,\n    :plotting_custom,\n]\n\nplotting_functions_gif = [\n    :plotting_jfunc1d,\n    :plotting_movie,\n]\n\n\nfunction generateplots(picdir; Plotter = nothing)\n    filepaths = String[]\n    if isdefined(Plotter, :Makie)\n        size = (600, 300)\n        Plotter.activate!(; type = \"png\", visible = false)\n        for plotting_f in plotting_functions_svg\n            @eval begin\n                path = joinpath($picdir, \"$($plotting_f).svg\")\n                p = $plotting_f(; Plotter = $Plotter)\n                $Plotter.save(path, p)\n                println(\"successfully generated plot for $($plotting_f)\")\n                push!($filepaths, path)\n            end\n        end\n        for plotting_f in plotting_functions_gif\n            @eval begin\n                path = joinpath($picdir, \"$($plotting_f).gif\")\n                p = $plotting_f(; Plotter = $Plotter, filename = path)\n                println(\"successfully generated plot for $($plotting_f)\")\n                push!($filepaths, path)\n            end\n        end\n    end\n    return filepaths\nend","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"","category":"page"},{"location":"script_examples/plotting/","page":"plotting","title":"plotting","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#GridVisualize.jl","page":"Home","title":"GridVisualize.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GridVisualize","category":"page"},{"location":"#GridVisualize","page":"Home","title":"GridVisualize","text":"GridVisualize\n\n(Image: Build status) (Image: ) (Image: ) (Image: code style: runic)\n\nGridVisualize\n\nPlotting companion module for ExtendableGrids.jl Provides plotting of grids,  scalar piecewise linear functions and vectors (2D only) for various plotting backends on simplicial grids in one, two or three space dimensions. The main supported backends are CairoMakie, GLMakie, PyPlot,  and PlutoVista. Plots is only partially supported (1D and 2D rectangular grids).\n\nDisclaimer\n\nThe code is rather complex and many codepaths are hard to test. Please be prepared to help fixing things.\n\nSample usage:\n\nPlotting a grid, a function or a vector field\n\ngridplot(grid, Plotter=GLMakie)\nscalarplot(grid, function,Plotter=GLMakie)\nvectorplot(grid, vectorfunction,Plotter=GLMakie)\nstreamplot(grid, vectorfunction,Plotter=GLMakie)\n\nThis works for  1/2/3D grids and either a function  represented by its values on  the nodes of the  grid, or a scalar  function of 1, 2  or 3 variables, respectively. Vector and stream plots are currently available for 2D only.\n\nThe grid argument should be an ExtendableGrid as defined by the ExtendableGrids.jl package. Instead of grid, the following arguments can be passed in order to describe a grid (which then is internally created on-the-fly):\n\nAn AbstractVector X specifying an 1D grid\nAbstractVectors X,Y specifying a 2D grid\nAbstractVectors X,Y,Z specifying a 3D grid\ncoord, cellnodes, where coord is a dim x nn matrix of point coordinates and cellnodes is as dim+1 x nc connectivity matrix of simplex node indices, describing a dim-dimensional simplex grid with nn nodes and nc simplices.\n\nPlot appearance can be tweaked by a number of keyword arguments.\n\nPlotters\n\nPlotters can be e.g. Plots, PyPlot, GLMakie, CairoMakie PlutoVista - we pass the module exported by the package. Different plotters can be used at the same time.\n\nMultiple plots in one plotting window\n\nvis=GridVisualizer(Plotter=GLMakie, layout=(1,2))\ngridplot!(vis[1,1],grid)\nscalarplot!(vis[1,2],grid,function)\nreveal(vis)\n\nTransient plots\n\nThis using fast updating via observables for GLMakie and persistent divs with PlutoVista.\n\nvis=GridVisualizer(Plotter=GLMakie)\nfor i=1:N\n   function=calculate(i)\n   scalarplot!(vis,grid,function)\n   reveal(vis)\nend\n\nMovies\n\nCurrently, these can be recorded with GLMakie, CairoMakie and Plots backends both from the REPL and Pluto notebooks. MP4 files and gifs can be created. PyPlot possibly will follow.\n\nThis shows the animated graphic in the REPL (essentially the same as above) and creates an embedded video in a Pluto notebook:\n\nvis=GridVisualizer(Plotter=Plots)\nmovie(vis) do vis\n  for i=1:N\n     function=calculate(i)\n     scalarplot!(vis,grid,function)\n     reveal(vis)\n  end\nend\n\nTo save to a file instead of showing in a notebooks or from the REPL , use:\n\nvis=GridVisualizer(Plotter=CairoMakie)\nmovie(vis, file=\"video.mp4\") do vis\n  for i=1:N\n     function=calculate(i)\n     scalarplot!(vis,grid,function)\n     reveal(vis)\n  end\nend\n\nSetting a default plotter\n\nInstead  of  specifying  a  Plotter in  calls  to  GridVisualizer, gridplot or scalarplot, a default plotter can be set:\n\ndefault_plotter!(PyPlot)\ngridplot(grid)\nscalarplot(grid, function)\n\nor \n\ndefault_plotter!(GLMakie)\nvis=GridVisualizer(layout=(1,2))\ngridplot!(vis[1,1],grid)\nscalarplot!(vis[1,2],grid,function)\n\nSwitching off plotting\n\nJust pass Plotter=nothing  in the respective places, or set default_plotter!(nothing) and all plotting functions will do nothing.\n\nAvailable plotting backends and functionality.\n\n'y': available\n'i': some level of interactive control\n'(y)': availability only on rectangular grids\n'p':  planned (no schedule though)\n'n': probably not, also in the future\n\n PyPlot Makie PlutoVista Plots VTKView\nscalarplot, 1D y y y,i y y\nvectorplot, 1D y y y y y\ngridplot, 1D y y y y \nscalarplot, 2D y y y (y) y,i\nvectorplot, 2D y y y y \nstreamplot, 2D y y p n \ngridplot, 2D y y,i y (y) y,i\nscalarplot, 3D y y,i y,i n y,i\ngridplot, 3D y y,i y,i n y,i\nvectorplot, 3D p p p n \nstreamplot, 3D  p p n \nmovie n y n y \n\nSample output\n\nPyPlot:\n\n(Image: )\n\nGLMakie:\n\n(Image: )\n\nPlots/gr:\n\n(Image: )\n\nVTKView:\n\n(Image: )\n\nvscode\n\nPlotting  into the plot pane of Visual Studio Code is working. Here, you can use CairoMakie or WGLMakie as backend. This works only with the mutating functions, i.e. you should use something like\n\nvis=GridVisualizer(Plotter=WGLMakie)\ngridplot!(vis,grid,clear=true,show=true)\n\nNotebooks\n\nPluto\n\nPlotting in Pluto notebooks for CairoMakie, PyPlot, Plots, GLMakie is working, WGLMakie probably works in combination with JSServe.\n\nPlotting in Pluto notebooks can use PlutoVista.jl based on plotly.js (1D) and vtk.js (2/3D). See the example notebook: pluto, html.\n\nJupyter\n\nChances are that things work with Jupyter as well.  Please ping me if you would like to volunteer with testing and possibly fixing this.\n\n\n\n\n\n","category":"module"}]
}
